from collections import deque

class TreeNode:
    def __init__(self, value=0):
        self.val = value
        self.left = None
        self.right = None

def max_width(root):
    """Calculate the maximum width of a binary tree."""
    if not root:
        return 0
    
    max_width = 0
    queue = deque([(root, 0)])  # Pair of (node, index)
    
    while queue:
        level_length = len(queue)
        _, first_index = queue[0]  # Index of the first node in this level
        
        for _ in range(level_length):
            node, index = queue.popleft()
            if node.left:
                queue.append((node.left, 2 * index))
            if node.right:
                queue.append((node.right, 2 * index + 1))
        
        # Calculate the width of the current level
        max_width = max(max_width, index - first_index + 1)
    
    return max_width

# Example usage
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.right = TreeNode(6)
print(f"Maximum width of the binary tree: {max_width(root)}")
